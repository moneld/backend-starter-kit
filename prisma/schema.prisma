// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  name                String
  password            String
  role                UserRole  @default(USER)
  isEmailVerified     Boolean   @default(false) @map("is_email_verified")
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime? @map("locked_until")
  lastFailedAttempt   DateTime? @map("last_failed_attempt")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  refreshTokens      RefreshToken[]
  verificationTokens VerificationToken[]
  Session            Session[]

  @@map("users")
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime  @map("expires_at")
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model VerificationToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@map("verification_tokens")
}

// Nouveau modèle pour les sessions actives
model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress    String   @map("ip_address")
  userAgent    String   @map("user_agent")
  lastActivity DateTime @default(now()) @map("last_activity")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@map("sessions")
}

// Nouveau modèle pour les événements de sécurité
model SecurityEvent {
  id        String            @id @default(uuid())
  type      SecurityEventType
  userId    String?           @map("user_id")
  ipAddress String?           @map("ip_address")
  userAgent String?           @map("user_agent")
  metadata  Json?
  createdAt DateTime          @default(now()) @map("created_at")

  @@index([type])
  @@index([userId])
  @@index([createdAt])
  @@map("security_events")
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  PASSWORD_CHANGED
  SUSPICIOUS_ACTIVITY
  FORCED_LOGOUT
  SESSION_CREATED
  SESSION_EXPIRED
}

model EncryptionKey {
  id        String    @id @default(uuid())
  version   Int       @unique @default(autoincrement())
  key       String // Clé chiffrée avec la master key
  algorithm String    @default("aes-256-gcm")
  isActive  Boolean   @default(true) @map("is_active")
  rotatedAt DateTime? @map("rotated_at")
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")

  @@index([version])
  @@index([isActive])
  @@map("encryption_keys")
}

// Ajouter un champ pour stocker les données sensibles chiffrées
model EncryptedData {
  id            String   @id @default(uuid())
  entityType    String   @map("entity_type") // Ex: "user", "payment", etc.
  entityId      String   @map("entity_id")
  fieldName     String   @map("field_name") // Ex: "ssn", "creditCard", etc.
  encryptedData String   @map("encrypted_data") // Format: version:iv:authTag:ciphertext
  keyVersion    Int      @map("key_version")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([entityType, entityId, fieldName])
  @@index([keyVersion])
  @@map("encrypted_data")
}
